@page "/editproduct/{id:int}"
@inject IViewProductByIdUseCase viewProductByIdUseCase
@inject IUpdateProductUseCase updateProductUseCase
@inject NavigationManager NavigationManager

<h3>EditProduct</h3>
<br />
@if (this.product is not null)
{   
	<EditForm Model="product" OnValidSubmit="Update">
		<DataAnnotationsValidator></DataAnnotationsValidator>
		@*<ValidationSummary></ValidationSummary>*@
		<div class="form-group">
			<label for="name">
				Product Name
			</label>
			<InputText id="name"
			@bind-Value="product.ProductName"
			class="form-control">
			</InputText>
			<ValidationMessage For="() => product.ProductName"></ValidationMessage>
		</div>

		<div class="form-group">
			<label for="quantity">
				Quantity
			</label>
			<InputNumber id="quantity"
			@bind-Value="product.Quantity"
			class="form-control">
			</InputNumber>
			<ValidationMessage For="() => product.Quantity"></ValidationMessage>

		</div>

		<div class="form-group">
			<label for="price">
				Price
			</label>
			<InputNumber id="price"
			@bind-Value="product.Price"
			class="form-control">
			</InputNumber>
			<ValidationMessage For="() => product.Price"></ValidationMessage>

		</div>

		<div class="form-group">
			<label for="inventories">
				Inventories
			</label>
			<ProductInventoriesComponent Product="this.product"></ProductInventoriesComponent>


		</div>
		<br />
		<button type="submit" class="btn btn-primary">Save</button>
		<a href="/products" class="btn btn-primary">Cancel</a>
	</EditForm>
}

@code {
	private Product? product;

	[Parameter]
	public int Id { get; set; }

	protected override async Task OnParametersSetAsync()
	{
		this.product = await viewProductByIdUseCase.ExecuteAsync(this.Id);
	}

	private async Task Update(EditContext args)
	{
		if (product is not null)
		{
			await updateProductUseCase.ExecuteAsync(this.product);
			NavigationManager.NavigateTo("/products");
		}
	}
}
