@page "/purchase"
@using static BlazorProgettoFinale.Components.Controls.Common.AutoCompleteComponent


@rendermode InteractiveServer
@inject IViewInventoriesByNameUseCase viewInventoriesByNameUseCase
@inject IViewInventoryByIdUseCase viewInventoryByIdUseCase
@inject IPurchaseInventoryUseCase purchaseInventoryUseCase

<h3>PurchaseInventory</h3>
<br />

<EditForm id="purchase-form" Model="purchaseViewModel" OnValidSubmit="Purchase">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="form-group">
        <label for="po">Purchase Order #</label>
        <InputText id="po" @bind-Value="purchaseViewModel.PONumber" class="form-control"></InputText>
    </div>
    <br />
    <div class="card">
        <div class="card-body">
            <div class="form-group">
                <AutoCompleteComponent Label="Inventory to Purchase"
                                       SearchFunction="SearchInventory"
                                       OnItemSelected="HandleItemSelected"></AutoCompleteComponent>
                @if (purchaseViewModel.InventoryPrice > 0)
                {
                    <text>Price:</text>
                    @purchaseViewModel.InventoryPrice.ToString("c")
                }

            </div>
        </div>
    </div>
    <br />
    <div class="form-group">
        <label for="qty">Quantity</label>
        <InputNumber id="qty" @bind-Value="purchaseViewModel.QuantityToPurchase" class="form-control"></InputNumber>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">Purchase</button>
</EditForm>



@code {
	private PurchaseViewModel purchaseViewModel = new PurchaseViewModel();

	private Inventory? selectedInventory = null;

	private List<ItemViewModel>? SearchInventory (string name)
	{
		var list = viewInventoriesByNameUseCase.ExecuteAsync(name).GetAwaiter().GetResult();

		if (list is null) return null;

		return list.Select(x => new ItemViewModel { Id = x.InventoryId, Name = x.InventoryName})?.ToList();
	}

	private async Task HandleItemSelected(ItemViewModel item)
	{
		selectedInventory = await viewInventoryByIdUseCase.ExecuteAsync(item.Id);

		this.purchaseViewModel.InventoryId = item.Id;
		this.purchaseViewModel.InventoryPrice = selectedInventory.Price;
	}

	private async Task Purchase()
	{
		
			await purchaseInventoryUseCase.ExecuteAsync(
			this.purchaseViewModel.PONumber,
			selectedInventory,
			this.purchaseViewModel.QuantityToPurchase,
			"Frank"
			);

			this.purchaseViewModel = new PurchaseViewModel();
			this.selectedInventory = null;
		
		
	}
}
