@page "/editinventory/{inventoryId:int}"
@inject IViewInventoryByIdUseCase viewInventoryByIdUseCase
@inject IUpdateInventoryUseCase updateInventoryUseCase
@inject NavigationManager NavigationManager

<h3>Edit Inventory</h3>

<EditForm Model="inventory" FormName="formInventory" OnValidSubmit="Update">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    @*<ValidationSummary></ValidationSummary>*@
    <InputNumber @bind-Value="inventory.InventoryId" hidden></InputNumber>
    <div class="form-group">
        <label for="name">
            Inventory Name
        </label>
        <InputText id="name"
        @bind-Value="inventory.InventoryName"
        class="form-control">
        </InputText>
        <ValidationMessage For="() => inventory.InventoryName"></ValidationMessage>
    </div>

    <div class="form-group">
        <label for="quantity">
            Quantity
        </label>
        <InputNumber id="quantity"
        @bind-Value="inventory.Quantity"
        class="form-control">
        </InputNumber>
        <ValidationMessage For="() => inventory.Quantity"></ValidationMessage>

    </div>

    <div class="form-group">
        <label for="price">
            Price
        </label>
        <InputNumber id="price"
        @bind-Value="inventory.Price"
        class="form-control">
        </InputNumber>
        <ValidationMessage For="() => inventory.Price"></ValidationMessage>

    </div>
    <br />
    <button type="submit" class="btn btn-primary">Update</button>
    <a href="/inventories" class="btn btn-primary">Cancel</a>
</EditForm>

@code {
    [Parameter]
    public int InventoryId { get; set; }
    [SupplyParameterFromForm]
    private Inventory? inventory { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        this.inventory ??= await viewInventoryByIdUseCase.ExecuteAsync(this.InventoryId);
    }
    private async Task Update(EditContext args)
    {
        if (inventory is not null)
        {
            await updateInventoryUseCase.ExecuteAsync(inventory);
            NavigationManager.NavigateTo("/inventories");
        }
    }
}
